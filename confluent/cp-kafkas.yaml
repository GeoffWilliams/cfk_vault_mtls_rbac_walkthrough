# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   creationTimestamp: null
#   labels:
#     run: testbox
#   name: testbox
#   namespace: confluent
#   annotations:
#     vault.hashicorp.com/agent-inject: "true"
#     vault.hashicorp.com/agent-inject-status: update
#     vault.hashicorp.com/preserve-secret-case: "true"
#     vault.hashicorp.com/role: confluent-operator

#     vault.hashicorp.com/agent-inject-secret-connect-bearer: secret/connect/bearer.txt
#     vault.hashicorp.com/secret-volume-path-connect-bearer: /vault/secrets
#     vault.hashicorp.com/agent-inject-file-connect-bearer: bearer.txt # this are mandatory name
#     vault.hashicorp.com/agent-inject-template-connect-bearer: |
#       {{- with secret "secret/connect/bearer.txt" -}}
#       {{ .Data.data.bearer | base64Decode }}
#       {{- end }}
# spec:
#   serviceAccountName: confluent-sa
#   containers:
#   - image: confluentinc/cp-server:7.4.1
#     name: testbox
#     command: ["/bin/sleep", "3650d"]
#     resources: {}
#   dnsPolicy: ClusterFirst
#   restartPolicy: Never
# status: {}


---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
spec:
  oneReplicaPerNode: true
  replicas: 3
  image:
    application: confluentinc/cp-server:7.4.1
    init: confluentinc/confluent-init-container:2.6.1
  dataVolumeCapacity: 10Gi
  configOverrides:
    server:
      # example of how to force specific cache time
      - ldap.refresh.interval.ms=120000

      # example of how to override the authorizer in Kafka
      # - authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      - confluent.authorizer.access.rule.providers=ZK_ACL,CONFLUENT

      # audit authentication logging (eg login/login fail)
      #- confluent.security.event.logger.authentication.enable=true

      # log topic/produce/consume denied
      #- confluent.security.event.router.config={"routes":{"crn:///kafka=*":{"interbroker":{"allowed":"","denied":"confluent-audit-log-events"},"describe":{"allowed":"","denied":"confluent-audit-log-events"},"management":{"allowed":"confluent-audit-log-events","denied":"confluent-audit-log-events"}},"crn:///kafka=*/group=*":{"consume":{"allowed":"","denied":"confluent-audit-log-events"},"describe":{"allowed":"","denied":"confluent-audit-log-events"},"management":{"allowed":"","denied":"confluent-audit-log-events"}},"crn:///kafka=*/topic=*":{"produce":{"allowed":"","denied":"confluent-audit-log-events"},"consume":{"allowed":"","denied":"confluent-audit-log-events"},"describe":{"allowed":"","denied":"confluent-audit-log-events"}}},"destinations":{"topics":{"confluent-audit-log-events":{}}},"default_topics":{"allowed":"confluent-audit-log-events","denied":"confluent-audit-log-events"},"excluded_principals":["User:kafka"]}
  tls:
    directoryPathInContainer: /vault/secrets
  license:
    directoryPathInContainer: /vault/secrets
  authorization:
    type: rbac
    superUsers:
    - User:kafka
    # - User:ksql
  services:
    mds:
      tls:
        enabled: true
      tokenKeyPair:
        directoryPathInContainer: /vault/secrets
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: mydomain.example
          prefix: rb-mds
      provider:
        type: ldap
        ldap:
          address: ldap://ldap.confluent.svc.cluster.local:389
          authentication:
            type: simple
            simple:
              directoryPathInContainer: /vault/secrets
          configurations:
            groupNameAttribute: cn
            groupObjectClass: posixGroup
            groupMemberAttribute: memberuid
            groupMemberAttributePattern: cn=(.*),ou=users,dc=test,dc=com
            groupSearchBase: dc=test,dc=com
            userNameAttribute: cn
            userMemberOfAttributePattern: CN=(.*),DC=test,DC=com
            userObjectClass: organizationalRole
            userSearchBase: dc=test,dc=com
            groupSearchScope: 2
  podTemplate:
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1000Mi"
        cpu: "1"
    serviceAccountName: confluent-sa
    annotations:
      kafkacluster-manual-roll: "1"
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/agent-inject-status: update
      vault.hashicorp.com/preserve-secret-case: "true"
      vault.hashicorp.com/agent-inject-secret-jksPassword.txt: secret/jksPassword.txt
      vault.hashicorp.com/agent-inject-template-jksPassword.txt: |
        {{- with secret "secret/jksPassword.txt" -}}
        {{ .Data.data.password }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-keystore.jks: secret/kafka-keystore.jks
      vault.hashicorp.com/agent-inject-template-keystore.jks: |
        {{- with secret "secret/kafka-keystore.jks" -}}
        {{ .Data.data.keystore | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-truststore.jks: secret/truststore.jks
      vault.hashicorp.com/agent-inject-template-truststore.jks: |
        {{- with secret "secret/truststore.jks" -}}
        {{ .Data.data.truststore | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-kafka-sasl-plain: secret/kafka-server/plain-jaas.conf
      vault.hashicorp.com/secret-volume-path-kafka-sasl-plain: /vault/secrets/jaas
      vault.hashicorp.com/agent-inject-file-kafka-sasl-plain: plain-jaas.conf #must be with this name
      vault.hashicorp.com/agent-inject-template-kafka-sasl-plain: |
        {{- with secret "secret/kafka-server/plain-jaas.conf" -}}
        {{ .Data.data.plainjaas | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-kafka-apikeys: secret/kafka-server/apikeys.json
      vault.hashicorp.com/secret-volume-path-kafka-apikeys: /vault/secrets/jaas
      vault.hashicorp.com/agent-inject-file-kafka-apikeys: apikeys.json #must be with this name
      vault.hashicorp.com/agent-inject-template-kafka-apikeys: |
        {{- with secret "secret/kafka-server/apikeys.json" -}}
        {{ .Data.data.apikeys | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-zk-digest: secret/kafka-server/digest-jaas.conf
      vault.hashicorp.com/secret-volume-path-zk-digest: /vault/secrets/jaas
      vault.hashicorp.com/agent-inject-file-zk-digest: digest-jaas.conf #must be with this name
      vault.hashicorp.com/agent-inject-template-zk-digest: |
        {{- with secret "secret/kafka-server/digest-jaas.conf" -}}
        {{ .Data.data.digestjaas | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-kafka-client-sasl-plain: secret/kafka-client/plain-jaas.conf
      vault.hashicorp.com/secret-volume-path-kafka-client-sasl-plain: /vault/secrets/client
      vault.hashicorp.com/agent-inject-file-kafka-client-sasl-plain: plain-jaas.conf #must be with this name
      vault.hashicorp.com/agent-inject-template-kafka-client-sasl-plain: |
        {{- with secret "secret/kafka-client/plain-jaas.conf" -}}
        {{ .Data.data.plainjaas | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-license: secret/license.txt
      vault.hashicorp.com/agent-inject-file-license: license.txt
      vault.hashicorp.com/agent-inject-template-license: |
        {{- with secret "secret/license.txt" -}}
        {{ .Data.data.license | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-mds-publickey: secret/mds-publickey.txt
      vault.hashicorp.com/agent-inject-file-mds-publickey: mdsPublicKey.pem # must be with this name
      vault.hashicorp.com/agent-inject-template-mds-publickey: |
        {{- with secret "secret/mds-publickey.txt" -}}
        {{ .Data.data.mdspublickey | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-mds-tokenkeypair: secret/mds-tokenkeypair.txt
      vault.hashicorp.com/agent-inject-file-mds-tokenkeypair: mdsTokenKeyPair.pem # must be with this name
      vault.hashicorp.com/agent-inject-template-mds-tokenkeypair: |
        {{- with secret "secret/mds-tokenkeypair.txt" -}}
        {{ .Data.data.mdstokenkeypair | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-ldap-simple: secret/ldap.txt
      vault.hashicorp.com/agent-inject-file-ldap-simple: ldap.txt # must be with this name
      vault.hashicorp.com/agent-inject-template-ldap-simple: |
        {{- with secret "secret/ldap.txt" -}}
        {{ .Data.data.ldapsimple | base64Decode }}
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-kafka-rest-bearer: secret/kafka/bearer.txt
      vault.hashicorp.com/agent-inject-file-kafka-rest-bearer: bearer.txt # must be with this name
      vault.hashicorp.com/agent-inject-template-kafka-rest-bearer: |
        {{- with secret "secret/kafka/bearer.txt" -}}
        {{ .Data.data.bearer | base64Decode }}
        {{- end }}
      vault.hashicorp.com/role: confluent-operator
  listeners:
    external:
      authentication:
        type: mtls
        principalMappingRules:
          - RULE:.*CN[\\s]?=[\\s]?([a-zA-Z0-9.]*)?.*/$1/
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: mydomain.example
          brokerPrefix: kafka-
          bootstrapPrefix: kafka-
      tls:
        enabled: true
        # Will use the certificates in the parent secretRef tls-kafka
    internal:
      authentication:
        type: mtls
        principalMappingRules:
          - RULE:.*CN[\\s]?=[\\s]?([a-zA-Z0-9.]*)?.*/$1/
      tls:
        enabled: true
        # Will use the certificates in the parent secretRef tls-kafka
  metricReporter:
    enabled: true
    bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
    authentication:
      type: mtls
    tls:
      enabled: true
  dependencies:
    zookeeper:
      endpoint: zookeeper.confluent.svc.cluster.local:2182
      authentication:
        type: mtls
      tls:
        enabled: true
    kafkaRest:
      authentication:
        type: bearer
        bearer:
          directoryPathInContainer: /vault/secrets

